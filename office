using ConsoleApp1;
using System.Text;
using static ConsoleApp1.Chapter4;

//var chapter = new Chapter4();
//chapter.Run();

/*
for (int counter = 0; counter < 50; counter += 5)
{
    console.writeline(counter);
}

for (int counter = 1; counter < 20; counter += 2)
{
    console.writeline(counter);
}

int counteri = 10;
int lengthoftext = 0;
do
{
    console.writeline("enter a name of a friend: ");
    string nameofafriend = console.readline();
    lengthoftext += nameofafriend.length;
} while (lengthoftext < 10);
console.writeline($"enough! {lengthoftext}");

int counter = 0;
string s = string.empty;
while (s == string.empty)
{
    console.writeline("enter smth: ");
    s = console.readline();
    counter++;
}

console.writeline($"that is all {counter}");

for (int i = 0; i < 10; i++)
{
    if (i % 2 == 0)
    {
        console.writeline($"odd here");
        continue;
    }
    console.writeline(i);
}*/

/* 
 Imagine you are a developer and get a job in which you need to create a program for a teacher. He needs a program written in c# that calculates the average score of his students. So he wants to be able to enter each score individually and then get the final average score once he enters -1.
So the tool should check if the entry is a number and should add that to the sum. Finally once he is done entering scores, the program should write onto the console what the average score is.
The numbers entered should only be between 0 and 20. Make sure the program doesn't crash if the teacher enters an incorrect value.
Test your program thoroughly.
 */

/*
int scores = 0, score = 0, count = -1;
string num = "0";
do
{
    if (int.TryParse(num, out score) && score >= 0 && score <= 20)
    {
        scores += score;
        count++;
    }
    else
    {
        Console.WriteLine("Invalid input!");
    }
    Console.Write("Enter Score: ");
    num = Console.ReadLine();
} while (num != "-1");

Console.WriteLine($"Average Score is {(double)scores / count}");
*/

/*

Human test = new("test", "testi", "black", 20);
test.Introduction();

class Human
{
    private string firstName;
    private string lastName;
    private string eyeColor;
    private int age;

    public Human()
    {
        Console.WriteLine("object created");
    }
    public Human(string firstName)
    {
        this.firstName = firstName;
    }

    public Human(string firstName, string lastName)
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public Human(string firstName, string lastName, string eyeColor)
    {
        this.firstName = firstName;
        this.lastName = lastName;
        this.eyeColor = eyeColor;
    }
    public Human(string firstName, string lastName, int age)
    {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    public Human(string firstName, string lastName, string eyeColor, int age)
    {
        this.firstName = firstName;
        this.lastName = lastName;
        this.eyeColor = eyeColor;
        this.age = age;
    }

    public void Introduction()
    {
        Console.WriteLine($"hello i am {firstName} {lastName}, {eyeColor} eyed, {age} years old");
    }
}
*/

/*
public class Phone
{
    public string Company;
    public string Model;
    public string ReleaseDay;
        
    public Phone(string company = "unknown", string model = "unknown", string releaseDay = "unknown") {
        Company = company;
        Model = model;
        ReleaseDay = releaseDay;
    }
        
    public void Introduce()
    {
        Console.WriteLine("It is {0} created by {1}. It was released {2}.", Model, Company, ReleaseDay);
    }
        
}

*/

Console.WriteLine(AddBinary("11", "1"));

string AddBinary(string a, string b)
{
    StringBuilder builder = new();

    int rm = 0;

    for (int i = 1; i < Math.Max(a.Length, b.Length) + 1; i++)
    {
        int aa = a.Length - i >= 0 ? a[a.Length - i] - '0' : 0;
        int bb = b.Length - i >= 0 ? b[b.Length - i] - '0' : 0;
        int sum = aa + bb + rm;
        if (sum > 1)
        {
            sum = sum % 2;
            rm = 1;
        } else
        {
            rm = 0;
        }
        builder.Append(sum);
    }

    if (rm > 0) builder.Append(rm);

    var res = builder.ToString().ToCharArray();
    Array.Reverse(res);
    return new string(res);
}

public class TreeNode
{
      public int val;
      public TreeNode left;
      public TreeNode right;
      public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
      {
        this.val = val;
        this.left = left;
        this.right = right;
      }
}
/*
bool IsSameTree(TreeNode p, TreeNode q)
{
    if (p == null && q == null) return true;
    if ((p == null && q != null) || (q == null && p != null)) return false;
    return p.val == q.val && IsSameTree(p.left, q.left) && IsSameTree(p.right, q.right);
}
*/
