char[,] arr;
Player curPlayer = Player.O;
string message = string.Empty;
int turn = 0;

while (true)
{
newgame:
    Initialize();
    while (true)
    {
        Render();
        var gameStatus = Checker();
        if ( gameStatus.gameFinished )
        {
            string result = gameStatus.isWinner ? "It's A Tie" : $"We Have A Winner Player {(Player)((int)(curPlayer + 1) % 2)}";
            Console.WriteLine($"\n{result}\nPress Enter To Restart");
            Console.ReadLine();
            goto newgame;
        };


        string choice = Console.ReadLine();

        if (string.Equals(choice, "exit", StringComparison.OrdinalIgnoreCase)) goto endgame;

        if (choice.Length == 1 && int.TryParse(choice, out int num))
        {
            if (!UpdateArr(num))
            {
                message = "Error: The cell is busy, pick something esle";
                continue;
            }
        }
        else
        {
            message = "Error: Wrong input";
            continue;
        }

        turn++;
        curPlayer = (Player)((int)(curPlayer + 1) % 2);
    }
    break;
}

endgame:









(bool isWinner, bool gameFinished) Checker()
{
    (bool isWinner, bool gameFinished) res = (false, false);
    for (int i = 0; i < 3; i++)
    {
        switch (arr[0, i], arr[1, i], arr[2, i]) 
        {
            case ('X', 'X', 'X'): return (true, true);
            case ('O', 'O', 'O'): return (true, true);
        };
        switch (arr[i, 0], arr[i, 1], arr[i, 2])
        {
            case ('X', 'X', 'X'): return (true, true);
            case ('O', 'O', 'O'): return (true, true);
        };
    }

    if (arr[0, 0] == arr[1, 1] && arr[1, 1] == arr[2, 2])
    {
        return (true, true);
    }
    if (arr[0, 2] == arr[1, 1] && arr[1, 1] == arr[2, 0])
    {
        return (true, true);
    }

    return (false, turn == 9);
}


bool UpdateArr(int num)
{
    int row = --num / 3, col = num % 3;
    if (char.IsDigit(arr[row, col]))
    {
        arr[row, col] = curPlayer.ToString()[0];
        return true;
    }
    return false;
}

void Render()
{
    Console.Clear();
    Console.WriteLine(
$@"   |   |
 {arr[0, 0]} | {arr[0, 1]} | {arr[0, 2]}
___|___|___
   |   |
 {arr[1, 0]} | {arr[1, 1]} | {arr[1, 2]}
___|___|___
   |   |
 {arr[2, 0]} | {arr[2, 1]} | {arr[2, 2]}
   |   |");
    Console.Write($"{message}\nPlayer {curPlayer}: Choose your field: ");
    message = string.Empty;
}


void Initialize()
{
    arr = new char[,] {
        { '1', '2', '3'},
        { '4', '5', '6'},
        { '7', '8', '9'}
    };
    curPlayer = Player.O;
    turn = 0;
}


enum Player
{
    O,
    X
}
